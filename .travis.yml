language: ruby
sudo: required
services:
- docker
before_install:
- echo "Installing test gems"
- gem install yaml-lint
- export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
- echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee
  -a /etc/apt/sources.list.d/google-cloud-sdk.list
- curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
- sudo apt-get update
- sudo apt-get install -y dpkg
- sudo apt-get install google-cloud-sdk
- curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.10.5/bin/linux/amd64/kubectl;
  chmod +x ./kubectl; sudo mv ./kubectl /usr/bin/
- sudo apt-get install jq
- echo $GCP_KEY_FILE | base64 -d > ./keyfile
- gcloud auth activate-service-account -q $(jq -r .client_email keyfile) --key-file=./keyfile
  --project  $(jq -r .project_id keyfile)
- rm ./keyfile
install: true
script:
- pwd
- echo "Using GKE deployment, cloud provider Google Cloud Platform (gcp) "
- mkdir gke_test; pushd gke_test
- export TESTCLUSTERNAME="sol-gke-travistest-$(date +%s)"
- wget https://raw.githubusercontent.com/SolaceProducts/solace-gke-quickstart/master/scripts/create_cluster.sh
- chmod 755 create_cluster.sh
- "./create_cluster.sh -z us-east4-a,us-east4-b,us-east4-c -c $TESTCLUSTERNAME -m
  n1-standard-1"
- gcloud container clusters get-credentials $TESTCLUSTERNAME --zone us-east4-a --project
  capable-stream-180018
- popd
- kubectl get nodes -o wide
- kubectl get statefulset,svc,pods,pvc,pv
- # Setup test client
- curl -O https://sftp.solace.com/download/SDKPERF_C_LINUX64
- tar -xvf SDKPERF_C_LINUX64
- >
  testServices () {
    while true; do url="$(kubectl get statefulset,svc,pods,pvc,pv --show-labels | grep LoadBalancer | awk '{print $4}')"; echo $url | grep pending || break; sleep 5; done
    echo $url; sleep 5
    curl -sS -u admin:admin http://$url:8080/SEMP -d "<rpc><show><redundancy></redundancy></show></rpc>" || return 1
    curl -sS -u admin:admin http://$url:8080/SEMP -d "<rpc><show><config-sync></config-sync></show></rpc>" || return 1
    pubSubTools/sdkperf_c -cip=$url -mn=100000 -mr=0 -ptl=t1 -stl=t1 | grep "Total Messages" || return 1
  }
- >
  testDeployHelmv2 () {
    # Params: $1 is the Helm chart name
    echo
    helm install --name my-release solacecharts/$1 --set solace.size=dev,solace.usernameAdminPassword=admin
    echo
    echo "Waiting for chart $1 to deploy..."
    echo
    until kubectl get pods --show-labels | grep my-release-$1 | grep -m 1 -E 'active=true'; do sleep 10; done
    sleep 5
    echo -e "\nProtocol\tAddress\n"`kubectl get svc --namespace default my-release-$1 -o jsonpath="{range .spec.ports[*]}{.name}\tmy-release-$1.default.svc.cluster.local:{.port}\n"`
    testServices || return 1
    helm delete my-release --purge
    kubectl delete pvc --all
    # Wait for all pods deleted
    while kubectl get po | grep my-release-$1 ; do sleep 5; done
    echo "PASSED: Tested chart $1 using Helm v2"
  }
- >
  testDeployHelmv3 () {
    # Params: $1 is the Helm chart name
    echo "============================================================================"
    helm install my-release solacecharts/$1 --set solace.size=dev,solace.usernameAdminPassword=admin
    echo
    echo "Waiting for chart $1 to deploy..."
    echo
    until kubectl get pods --show-labels | grep my-release-$1 | grep -m 1 -E 'active=true'; do sleep 10; done
    sleep 5
    echo -e "\nProtocol\tAddress\n"`kubectl get svc --namespace default my-release-$1 -o jsonpath="{range .spec.ports[*]}{.name}\tmy-release-$1.default.svc.cluster.local:{.port}\n"`
    testServices
    helm delete my-release
    kubectl delete pvc --all
    # Wait for all pods deleted
    while kubectl get po | grep my-release-$1 ; do sleep 5; done
    echo "PASSED: Tested chart $1 using Helm v3"
  }
- travis_wait 30 sleep 1800 &
- # install Helm v2
- export DESIRED_VERSION=v2.16.12; curl -sSL https://raw.githubusercontent.com/helm/helm/master/scripts/get | bash
- # This enables getting started on most platforms by granting Tiller cluster-admin privileges
- kubectl -n kube-system create serviceaccount tiller
- kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
- helm init --wait --service-account=tiller --upgrade # this may take some time
- helm version
- # test charts
- helm repo add solacecharts https://solaceproducts.github.io/pubsubplus-kubernetes-quickstart/helm-charts
- helm repo list
- testDeployHelmv2 pubsubplus-dev
- testDeployHelmv2 pubsubplus
- testDeployHelmv2 pubsubplus-ha
- # cleanup
- helm reset --force
- rm -rf ~/.helm
- sudo rm /usr/local/bin/helm
- sleep 5
- # install Helm v3
- export DESIRED_VERSION=; curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
- helm version
- # test charts
- helm repo add solacecharts https://solaceproducts.github.io/pubsubplus-kubernetes-quickstart/helm-charts
- helm repo list
- testDeployHelmv3 pubsubplus-dev
- testDeployHelmv3 pubsubplus
- testDeployHelmv3 pubsubplus-ha

after_success:
- echo "Chart ha and dev variants created and smoke-tested"

after_script:
- gcloud container clusters delete $TESTCLUSTERNAME --quiet --zone us-east4-a
- gcloud compute disks list | grep travis | sed 1d $rpt | while read -r a b c; do
  gcloud compute disks delete $a --zone $b --quiet; done
